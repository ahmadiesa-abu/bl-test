tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-aws-plugin?version= >=2.9.0
  - plugin:cloudify-kubernetes-plugin?version= >=2.11.0
  - plugin:cloudify-utilities-plugin?version= >=1.22.1
  - plugin:cloudify-terraform-plugin?version= >=0.18.8

labels:
  csys-obj-type:
    values:
      - environment

inputs:
  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: 'ca-central-1'

  eks_cluster_name:
    type: string

  eks_nodegroup_name:
    type: string
    default: { concat: [ 'eks_node_group', { get_input: eks_cluster_name } ] }

  kubernetes_version:
    type: string
    default: ''

  service_account_name:
    type: string
    default: examples-user

  service_account_namespace:
    type: string
    default: default

  ssh_keypair:
    type: string
    default: { concat: [ 'eks_key', { get_input: eks_cluster_name } ] }

  agent_key_name:
    type: string
    default: agent_key

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  terraform:
    type: cloudify.nodes.terraform
    properties:
      resource_config:
        installation_source: https://releases.hashicorp.com/terraform/1.1.4/terraform_1.1.4_linux_amd64.zip

  eks_cluster:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        source:
          location: modules/eks.zip
        variables:
          region: { get_input: aws_region_name }
          cluster_name: { get_input: eks_cluster_name }
          nodegroup_name: { get_input: eks_nodegroup_name }
          kubernetes_version: { get_input: kubernetes_version }
          aws_access_key: { get_secret: aws_access_key_id }
          aws_secret_key: { get_secret: aws_secret_access_key }
    relationships:
      - type: cloudify.terraform.relationships.run_on_host
        target: terraform

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration: &kubernetes_master_configuration
        file_content: { get_attribute: [ eks_cluster, outputs, kubeconfig, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: eks_cluster

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: { get_input: service_account_name }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_service_account

  secret:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      client_config:
        configuration: *kubernetes_master_configuration
      use_external_resource: true
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: {get_attribute: [new_service_account, kubernetes, secrets, 0, name]}
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_secret
          payload: V1Secret
        read:
          api: CoreV1Api
          method: read_namespaced_secret
        update:
          api: CoreV1Api
          method: replace_namespaced_secret
          payload: V1Secret
        delete:
          api: CoreV1Api
          method: delete_namespaced_secret
          payload: V1DeleteOptions
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}

  store_token_and_kubeconfig:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/store_kube_token_and_config.py
          executor: central_deployment_agent
          inputs:
            kube_token: { get_attribute: [ secret, kubernetes, data, token ] }
            kube_config: { get_attribute: [ eks_cluster, outputs, kubeconfig, value ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: secret

  sanity_pod:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config: &kubeconfig
        configuration:
          api_options:
            host:  { get_attribute: [ eks_cluster, outputs, cluster_endpoint, value ] }
            api_key: { get_attribute: [ store_token_and_kubeconfig, token ] }
            debug: false
            verify_ssl: false
      validate_resource_status: true
      file:
        resource_path: resources/template.yaml
    relationships:
      - type: cloudify.relationships.depends_on
        target: store_token_and_kubeconfig
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate: {}
        create:
          implementation: kubernetes.cloudify_kubernetes.tasks.file_resource_create
        configure: {}
        start:
          implementation: kubernetes.cloudify_kubernetes.tasks.file_resource_delete
        poststart: {}
        prestop: {}
        stop: {}
        delete: {}
        postdelete: {}

  agent_key:
      type: cloudify.keys.nodes.RSAKey
      properties:
        resource_config:
          key_name: { get_input: agent_key_name }
          openssh_format: true
        use_secret_store: true
        use_secrets_if_exist: true
      interfaces:
        cloudify.interfaces.lifecycle:
          create:
            implementation: keys.cloudify_ssh_key.operations.create
            inputs:
              store_private_key_material: true

  wp_namespace:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config: *kubeconfig
      validate_resource_status: true
      file:
        resource_path: resources/namespace.yaml
        template_variables:
          name: wp
    relationships:
      - type: cloudify.relationships.depends_on
        target: store_token_and_kubeconfig

  dp_namespace:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config: *kubeconfig
      validate_resource_status: true
      file:
        resource_path: resources/namespace.yaml
        template_variables:
          name: dp
    relationships:
      - type: cloudify.relationships.depends_on
        target: store_token_and_kubeconfig

capabilities:
  endpoint:
    value: { get_attribute: [ eks_cluster, outputs, cluster_endpoint, value ] }

  connection_details:
    value: *kubernetes_master_configuration

  token:
    value: { get_attribute: [ store_token_and_kubeconfig, token ] }

  ssl_ca_cert:
    value: { get_attribute: [ store_token_and_kubeconfig, ssl_ca_cert ] }

  region_name:
    value: { get_input: aws_region_name }

  cluster_security_group:
    value: { get_attribute: [ eks_cluster, outputs, cluster_security_group_id, value ] }

  node_security_group:
    value: { get_attribute: [ eks_cluster, resources, node, instances, 0, attributes, security_group_id ] }

  vpc:
    value: { get_attribute: [ eks_cluster, resources, this, instances, 0, attributes, id ] }

  private_subnet_01:
    value: { get_attribute: [ eks_cluster, resources, private, instances, 0, attributes, id ] }

  private_subnet_02:
    value: { get_attribute: [ eks_cluster, resources, private, instances, 1, attributes, id ] }

  private_route_table:
    value: { get_attribute: [ eks_cluster, resources, private_nat_gateway, instances, 0, attributes, route_table_id ] }

  public_subnet_01:
    value: { get_attribute: [ eks_cluster, resources, public, instances, 0, attributes, id ] }

  public_subnet_02:
    value: { get_attribute: [ eks_cluster, resources, public, instances, 1, attributes, id ] }

  public_route_table:
    value: { get_attribute: [ eks_cluster, resources, public_internet_gateway, instances, 0, attributes, route_table_id ] }
